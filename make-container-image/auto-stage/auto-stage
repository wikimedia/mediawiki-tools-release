#!/usr/bin/env bash

set -eu -o pipefail

DEFAULT_GIT_BASE=https://gerrit.wikimedia.org/r

GIT_BASE=${GIT_BASE:-$DEFAULT_GIT_BASE}

# Leave this set to 'yes' normally.  If you're doing development on
# this script you can set this to 'no' to reduce test cycle time.
perform_updates=yes

###

WIKIVERSIONS_JSON=wikiversions.json
WIKIVERSIONS_PHP=wikiversions.php

# Returns true if building for train-dev environment
function train_dev {
    [ "${MW_CONFIG_BRANCH:-}" = "train-dev" ]
}

if train_dev; then
    WIKIVERSIONS_JSON=wikiversions-dev.json
    WIKIVERSIONS_PHP=wikiversions-dev.php
fi

function active_versions {
    jq -r 'values[]' < $WIKIVERSIONS_JSON | sort -u | sed -e 's/^php-//'
}

function apply_patch {
    local version="$1"
    # patchfile is expected to look like one of:
    # - ./core/01-TXXXXXX.patch
    # - ./extensions/SomeExtension/01-TXXXXXX.patch
    # - ./skins/SomeSkin/01-TXXXXXX.patch
    # - ./vendor/01-TXXXXXX.patch
    local patchfile="$2"

    local type
    type="$(echo "$patchfile" | cut -d/ -f2)"

    local targetdir

    case "$type" in
        core)
            targetdir=php-$version
            ;;
        vendor)
            targetdir=php-$version/vendor
            ;;
        extensions|skins)
            local module
            module="$(echo "$patchfile" | cut -d/ -f3)"
            targetdir=php-$version/$type/$module
            ;;
        *)
            echo "Unexpected patch type: $type"
            exit 1
            ;;
    esac

    patchfile=$patches_dir/$version/$patchfile
    echo "Applying $patchfile in $targetdir"

    # Using --3way allows already-applied patches to be skipped.
    if ! git_am "$targetdir" --3way "$patchfile"; then
        echo Running git -C "$targetdir" am --abort
        git_am "$targetdir" --abort || true
        echo "Failed to apply $patchfile in $targetdir"
        exit 1
    fi
}

function git_am {
    local repodir="$1"
    shift

    git -C "$repodir" \
         -c user.email=auto-stage@wikimedia.org \
         -c user.name="Auto Stager" \
         am "$@"
}


function run_quietly_if_ok {
    local output
    output=$(mktemp /tmp/quiet.XXXXXX)

    if "$@" > "$output" 2>&1; then
        # Great
        rm "$output"
    else
        # No good
        local status=$?
        cat "$output"
        rm "$output"
        exit $status
    fi
}

function apply_patches {
    local version="$1"

    local patch_dir="$patches_dir/$version"

    if [ -d "$patch_dir" ]; then
        echo "Applying patches for $version"
        for patch in $(cd "$patch_dir" && find . -name "*.patch" | sort -n); do
            apply_patch "$version" "$patch"
        done
        echo "Done applying patches for $version"
    else
        echo "No patches for $version"
    fi
}

function php_with_errors {
    local dc=eqiad

    if train_dev; then
        dc=dev
    fi

    env WMF_MAINTENANCE_OFFLINE=1 WMF_DATACENTER=$dc php -d display_errors=on -d error_reporting=E_ALL "$@"
}

function mwscript {
    php_with_errors multiversion/MWScript.php "$@"
}

function same {
    # diff returns true (exit 0) if the files are the same.
    diff "$@" >/dev/null
}

function update_atomically {
    local file="$1"
    local tmp="$2"

    shift 2

    # Run the user-supplied command. It is expected to create $tmp
    "$@"
    if [ ! -f "$tmp" ]; then
        echo "update_atomically: Command '$*' did not create $tmp as expected"
        return 1
    fi

    if [ ! -f "$file" ] || ! same "$tmp" "$file"; then
        #echo "$file was updated"
        mv "$tmp" "$file"
    else
        #echo "$file did not change"
        rm "$tmp"
    fi
}

function list_versions {
    multiversion/bin/list-versions.php $WIKIVERSIONS_JSON
}

function merge_message_file_list {
    for version in $(active_versions); do
        local em="wmf-config/ExtensionMessages-$version.php"
        local tmp="$em.tmp"

        update_atomically "$em" "$tmp" \
          run_quietly_if_ok \
            mwscript mergeMessageFileList.php \
                 --wiki=aawiki \
                 --force-version "$version" \
                 --list-file=wmf-config/extension-list \
                 --output="$tmp"
    done
}

function setup_l10n {
    # If AUTO_STAGE_LANG is set, generate l10n only for that
    # language.
    local lang=${AUTO_STAGE_LANG:-}
    local langoption=

    if [ "$lang" ]; then
        langoption="--lang $lang"
    fi

    for version in $(active_versions); do
        echo -n "Building/updating L10N files for $version"
        if [ "$lang" ]; then
            echo " ($lang only)"
        fi
        echo
        # shellcheck disable=SC2086
        mwscript rebuildLocalisationCache.php \
                 --wiki=aawiki \
                 --force-version "$version" \
                 $langoption \
                 --store-class=LCStoreCDB \
                 --threads="$(nproc)" \
                 --skip-message-purge
    done
}

function clone_or_update_repo {
    local repo="$1"
    local dir="$2"
    local branch="$3"

    echo "Clone or update $repo, branch: $branch, dir: $dir"

    if [ "$perform_updates" == "no" ]; then
        echo "\$perform_updates is no.  Skipping"
        return
    fi

    if [ ! -d "$dir" ] || empty_dir "$dir"; then
        echo Fresh clone
        git clone -b "$branch" "$repo" "$dir"
    fi

    # NOTE: Signals such as SIGINT will not be processed until this
    # subshell exits.  This could be a long operation.
    (
        cd "$dir"

        # Be resilient to changes in the origin.  For example, in
        # train-dev, $repo might be git://<temporaryIP>:<randomport>
        # whose parts may change from run to run.
        git remote set-url origin "$repo"

        # This discards patches (which aren't committed).
        echo Resetting checkout
        run_quietly_if_ok git reset --hard
        run_quietly_if_ok git submodule foreach --recursive 'git reset --hard'

        echo Updating checkout from origin
        git fetch
        git log HEAD..FETCH_HEAD
        git checkout -B "$branch" "$(select_commit "$repo" "$branch")"
        echo "$repo checked out at commit $(git rev-parse HEAD)"

        echo Updating submodules
        git submodule update --init --recursive --jobs "$(nproc)"
    )

    echo
}

function select_commit {
    local repo="$1"
    local branch="$2"

    if [ "$repo" = "$GIT_BASE/operations/mediawiki-config" ] && [ "${MEDIAWIKI_CONFIG_COMMIT:-}" ]; then
        echo "$MEDIAWIKI_CONFIG_COMMIT"
    elif [ "$repo" = "$GIT_BASE/mediawiki/core" ] && [ "$(get_mediawiki_commit_env "$branch")" ]; then
        get_mediawiki_commit_env "$branch"
    else
        echo "origin/$branch"
    fi
}

function get_mediawiki_commit_env {
    local branch="$1" # This will be something like wmf/1.38.0-wmf.7

    if [ "${MEDIAWIKI_COMMITS:-}" ]; then
        local res

        res=$(echo "$MEDIAWIKI_COMMITS" | jq -r ".[\"$branch\"]")

        if [ "$res" != "null" ]; then
            echo "$res"
        fi
    fi
}


function checkout_or_update_version {
    local version="$1"

    local dir="php-$version"
    local branch="wmf/$version"

    clone_or_update_repo "$GIT_BASE/mediawiki/core" "$dir" "$branch"
    # NOTE: Patches result in files that are modified in each run of auto-stage.
    apply_patches "$version"

    if [ "$(find "$workdir" -name '*.orig')" ]; then
        echo 'Undesired *.orig files found after applying patches:'
        find "$workdir" -name '*.orig'
        false
    fi
    if [ "$(find "$workdir" -name '*.rej')" ]; then
        echo 'Undesired *.rej files found after applying patches:'
        find "$workdir" -name '*.rej'
        false
    fi
    if [ "$(find "$workdir" -name '*~')" ]; then
        echo 'Undesired *~ files found after applying patches:'
        find "$workdir" -name '*~'
        false
    fi
}

function prepare_mw_versions {
    echo multiversion/bin/generate-php-wikiversions.php "$WIKIVERSIONS_JSON" "$WIKIVERSIONS_PHP"
    php_with_errors multiversion/bin/generate-php-wikiversions.php "$WIKIVERSIONS_JSON" "$WIKIVERSIONS_PHP"
    php_with_errors multiversion/bin/update-all-localsettings.php
    generate_all_gitinfos
}

function generate_all_gitinfos {
    local version

    for version in $(active_versions); do
        generate_gitinfos_for_version "$version"
    done
}

function generate_gitinfos_for_version {
    local version="$1"

    echo "Generating gitinfos for $version"

    local dir="php-$version"
    local output_dir="$dir/cache/gitinfo"

    mkdir -p "$output_dir"

    generate_gitinfo_for_dir "$dir" "$output_dir/info.json"

    for type in extensions skins; do
        for sub in "$dir/$type"/*; do
            if [ -d "$sub" ]; then
                info_file="$output_dir/info-$type-$(basename "$sub").json"
                generate_gitinfo_for_dir "$sub" "$info_file"
            fi
        done
    done

    echo "Done generating gitinfos for $version"
}

function generate_gitinfo_for_dir {
    local dir="$1"
    local outfile="$2"

    local temp
    temp="$(mktemp)"

    update_atomically "$outfile" "$temp" generate_gitinfo_for_dir_1 "$dir" "$temp"

    chmod a+r "$outfile"
}

function generate_gitinfo_for_dir_1 {
    local dir="$1"
    local outfile="$2"

    local git_dir
    local head_sha1
    local head
    local commit_date
    local branch
    local remote_url

    git_dir="$(git -C "$dir" rev-parse --git-dir)"
    # Change relative path to absolute
    if ! [[ "$git_dir" =~ ^/ ]]; then
        git_dir="$dir/$git_dir"
    fi

    # This information is used by https://<site>/wiki/Special:Version
    # to construct a link to a commit in Gerrit (gitiles), so it must
    # not refer to a local commit (i.e., a patch).  Use git merge-base
    # to find the nearest public commit.
    head_sha1="$(git -C "$dir" merge-base HEAD origin)"

    head="$(sed -e 's/^ref: //' < "$git_dir/HEAD")"
    commit_date="$(git -C "$dir" show -s --format=%ct)"
    branch="$(echo "$head" | sed -E -e 's,^refs/(heads|tags)/,,')"
    remote_url="$(git -C "$dir" ls-remote --get-url)"

    cat <<EOF > "$outfile"
{
  "@directory": "$(readlink -e "$dir")",
  "head": "$head",
  "headSHA1": "$head_sha1",
  "headCommitDate": "$commit_date",
  "branch": "$branch",
  "remoteURL": "$remote_url"
}
EOF
}


function empty_dir {
    local dir="$1"

    [ "$(/bin/ls -A "$dir" | wc -l)" == 0 ]
}

# FIXME: private settings should be handled using a ConfigMap
function setup_private_settings {
    echo Setup private settings
    if [ "${ON_RELEASES_SERVER:-}" ]; then
        rsync -av --delete --exclude .git \
              deployment.eqiad.wmnet::srv-mediawiki-private-primary/ private/
    elif train_dev; then
        echo Setting up private/PrivateSettings.php for train-dev
        cp -p /PrivateSettings-train-dev.php private/PrivateSettings.php
    else
        echo Using stub
        # Stub
        cp -p private/readme.php private/PrivateSettings.php
    fi
    echo Finished private settings
    echo
}

function setup_patches {
    echo Setup patches

    if [ -d /srv/patches ]; then
        patches_dir=/srv/patches
        echo "Using $patches_dir for patches"
    elif [ "${ON_RELEASES_SERVER:-}" ]; then
        rsync -av --delete --exclude .git \
              deployment.eqiad.wmnet::srv-patches-releases-primary/ /tmp/patches/
    else
        echo No patches
    fi

    echo Finished setting up patches
    echo
}

function announce {
    echo
    echo "**" "$@" "**"
    echo
}

function generate_build_signature {
    local operations_mediawiki_config

    operations_mediawiki_config=$(git rev-parse HEAD)

    echo "{\"operations/mediawiki-config\": \"$operations_mediawiki_config\","

    echo '"mediawiki/core": {'
    local need_comma=
    for version in $(active_versions); do
        local dir="php-$version"

        local version_hash
        version_hash=$(git -C "$dir" rev-parse HEAD)

        if [ "$need_comma" ]; then
            echo -n ","
        fi

        echo "\"$version\": \"$version_hash\""

        need_comma=y
    done
    echo '}'

    echo '}'
}

function write_build_signature {
    generate_build_signature | jq . > build-signature
}

# Delete inactive php-<version> dirs that have aged out.
function delete_old_checkouts {

    echo Deleting old checkouts

    declare -A active_versions
    for version in $(active_versions); do
        active_versions[$version]=1
    done

    # This command copied from https://wikitech.wikimedia.org/wiki/Heterogeneous_deployment/Train_deploys#Weekly_steps
    for candidate in $(find . -mindepth 2 -maxdepth 2 -type f -path './php-*/README.md' -ctime +7 -exec dirname {} \; | sed -e 's,^\./php-,,'); do
        echo -n "$candidate: "
        if [ "${active_versions[$candidate]:-}" ]; then
            echo "Active.  Will not delete"
        else
            echo "Deleting..."
            rm -fr "php-$candidate"
            rm -f "wmf-config/ExtensionMessages-$candidate.php"
        fi
    done

    echo Done deleting old checkouts
    echo
}

workdir=/srv/mediawiki
patches_dir=/tmp/patches

announce auto-stage running

# These traps make auto-stage more responsive to being interrupted.  I
# don't know why it helps, though, since the default signal handlers
# should do what we want in the first place.  The auto-stage is
# executed using docker run --init ..., so this script does not run as
# PID 1 (and therefore _should_ have default signal handling behavior).
trap 'echo auto-stage caught SIGINT. Exiting' SIGINT
trap 'echo auto-stage caught SIGTERM. Exiting' SIGTERM

if [ "$GIT_BASE" != "$DEFAULT_GIT_BASE" ]; then
    git config --global "url.$GIT_BASE.insteadOf" "$DEFAULT_GIT_BASE"
fi

clone_or_update_repo "$GIT_BASE/operations/mediawiki-config" "$workdir" "${MW_CONFIG_BRANCH:-master}"

cd "$workdir"

setup_private_settings
setup_patches

delete_old_checkouts

for version in $(active_versions); do
    checkout_or_update_version "$version"
done

write_build_signature

prepare_mw_versions

merge_message_file_list
setup_l10n

announce auto-stage finished
