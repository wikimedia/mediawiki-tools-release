#!/usr/bin/env bash

set -eu -o pipefail

function usage {
    cat <<EOF
Usage: $0 WORKDIR
EOF
    exit 1
}

scriptdir="$(dirname "$0")"
supportdir="$scriptdir/support"
# shellcheck source=support/utils.sh
source "$supportdir/utils.sh"

function announce {
    echo
    echo "**" "$@" "**"
    echo
}

default_base=multiversion-base:latest

# Image name including registry, but excluding the tag.
mv_image_name="${mv_image_name:-docker-registry.discovery.wmnet/restricted/mediawiki-multiversion}"

rsync_args=(
	       --exclude .git \
	       --exclude **/cache/l10n/upstream \
	   )

# sets $base_image global
function select_base_image {
    base_image="$default_base"

    if [ -f last-build ]; then
        base_image="$(cat last-build)"
    fi

    if [ "$base_image" == "$default_base" ]; then
        # The default base image is always a good choice
        return
    fi

    if [ "${FORCE_FULL_BUILD:-false}" = "true" ]; then
        echo "FORCE_FULL_BUILD requested.   Using $default_base"
        base_image="$default_base"
        return
    fi

    if ! image_exists_locally "$base_image"; then
        # Nonexistent images are not suitable.
        base_image="$default_base"
        return
    fi

    if "$supportdir/new-train-version" "$workdir" "$base_image"; then
        # A new train version is incoming, so we only want to use the default base.
        base_image="$default_base"
        return
    fi
}

function image_exists_locally {
    local image="$1"

    [ "$(docker image ls -q "$image" | wc -l)" -gt 0 ]
}

function volume_exists {
    local volume="$1"

    docker volume inspect "$volume" >/dev/null 2>&1
}

function augment_rsync_args {
    # Add --include's for active branches, based on reading workdir's
    # wikiversions.json file.

    local version
    for version in $(unique_wikiversions "$workdir"); do
        rsync_args+=(--include "/php-$version")
    done

    # And exclude any other trees that may be lurking
    rsync_args+=(--exclude "/php-*")
}


if [ $# -ne 1 ]; then
    usage
fi

workdir="$1"

if [ "${workdir:0:1}" = "/" ]; then
    # workdir is an absolute path
    if [ ! -d "$workdir" ]; then
        echo "$0: work dir $workdir does not exist"
        exit 1
    fi
else
    # workdir doesn't begin with a slash. Assume it is a named volume
    if ! volume_exists "$workdir"; then
        echo "$0: A volume named '$workdir' does not exist"
        exit 1
    fi
fi

announce build-mv-image running

augment_rsync_args

select_base_image
echo "Using $base_image as base image"

tag=$(date '+%Y-%m-%d-%H%M%S-publish')
fqin="$mv_image_name:$tag"

set -x
time "$supportdir/build-image-incr.py" "$default_base" "$workdir" "/srv/mediawiki" "$fqin" --layer "$base_image" "${rsync_args[@]}"
set +x

echo "$fqin" > last-build.tmp
mv last-build.tmp last-build

announce build-mv-image finished
